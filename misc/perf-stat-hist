#!/bin/bash
#
# perf-stat-hist - perf_events stat histogram hack.
#
# This is a proof-of-concept showing in-kernel histograms using Linux
# perf_events (aka the "perf" command).
#
# USAGE: ./perf-stat-hist tracepoint variable [seconds]
#    eg,
#        ./perf-stat-hist syscalls:sys_enter_read count 10  
#
# This uses multiple counting tracepoints with different filters, one for each
# histogram bucket. While this is summarized in-kernel, the use of multiple
# tracepoints does add addiitonal overhead, which is more evident if you change
# the power-of size from 4 to 2 (which creates more buckets). Hopefully, in the
# future this this functionality will be provided in an efficient way from
# perf_events itself, at which point this rough script can be deleted forever.
#
# From perf-tools: https://github.com/brendangregg/perf-tools
# 
# COPYRIGHT: Copyright (c) 2014 Brendan Gregg.
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)
#
# 30-Jun-2014	Brendan Gregg	Created this.

if (( $# < 2 )); then
	echo "USAGE: $0 tracepoint variable [seconds]"
	echo "   eg,"
	echo "       $0 syscalls:sys_enter_read count 10"
	exit
fi

tpoint=$1			# tracepoint
var=$2				# variable for histogram
duration=${3:-5}

pow=4				# power-of for bucket size
max=$(( 1024 * 1024 ))		# intended max bucket value
debug=0

### check that tracepoint exists
if ! grep "^$tpoint\$" /sys/kernel/debug/tracing/available_events >/dev/null
then
	echo >&2 "ERROR: tracepoint \"$tpoint\" not found. Exiting..."
	[[ "$USER" != "root" ]] && echo >&2 "Not root user?"
	exit
fi

### build list of tracepoints and filters for each histogram bucket
tpoints=$(
	echo ' -e' $tpoint --filter '"'$var' == 0"'
	s=1;
	while (( s < max )); do
		echo ' -e' $tpoint --filter '"'$var' >= '$s' && '\
		    $var' < '$((s * pow))'"'
		(( s *= pow ))
	done
	echo ' -e' $tpoint --filter '"'$var' >= '$s'"'
)

if (( debug )); then
	echo tracepoints: $tpoints
fi

echo "Tracing $tpoint, power-of-$pow, max $max, for $duration seconds..."

### run perf
out="-o /dev/stdout"	# a workaround needed in linux 3.2; not by 3.4.15
stat=$(eval perf stat $tpoints -a $out sleep $duration 2>&1)

if (( $? != 0 )); then
	echo >&2 "ERROR running perf:"
	echo >&2 "$stat"
	exit
fi

if (( debug )); then
	echo raw output:
	echo "$stat"
	echo
fi

### find max value for ASCII histogram
most=$(echo "$stat" | awk -v tpoint=$tpoint '
	$2 == tpoint { gsub(/,/, ""); if ($1 > m) { m = $1 } }
	END { print m }'
)

### process output
echo
echo "$stat" | awk -v tpoint=$tpoint -v max=$max -v pow=$pow -v most=$most '
	function star(sval, smax, swidth) {
		stars = ""
		if (smax == 0) return ""
		for (i = 0; i < (swidth * sval / smax); i++) {
			stars = stars "#"
		}
		return stars
	}
	BEGIN {
		printf("            %-15s: %-8s %s\n", "Range", "Count",
		    "Distribution")
	}
	/Performance counter stats/ { s = 0 }
	# reverse order of rule set is important
	{ ok = 0 }
	$2 == tpoint { num = $1; gsub(/,/, "", num); ok = 1 }
	ok && s > 0 && s >= max {
		printf("   %10d -> %-10s: %-8s |%-38s|\n", s, "", num,
		    star(num, most, 38))
	}
	ok && s > 0 && s < max {
		printf("   %10d -> %-10d: %-8s |%-38s|\n", s, s * pow - 1, num,
		    star(num, most, 38))
		s *= pow
	}
	ok && s == 0 {
		printf("   %10d    %-10s: %-8s |%-38s|\n", 0, "", num,
		    star(num, most, 38))
		s = 1
	}
'
